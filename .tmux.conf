# smart tmux split navigation
# https://thoughtbot.com/blog/seamlessly-navigate-vim-and-tmux-splits
bind -n C-k if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-k" "select-pane -U"
bind -n C-j if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-j" "select-pane -D"
bind -n C-h if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-h" "select-pane -L"
bind -n C-l if "[ $(tmux display -p '#{pane_current_command}') = vim ]" "send-keys C-l" "select-pane -R"



# set activity monitor
setw -g monitor-activity on
set -g visual-activity on

# vim key bindings
set-window-option -g mode-keys vi

# pull in the development environment
bind D source-file ~/.tmux/dev

#bind -n C-L send-keys -R \; clear-history
bind -n C-o send-keys -R \; send-keys C-l \; clear-history

bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# rebind split keys
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# if in WSL, setup clipboard

# use vim keybindings in tmux copy-mode
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
